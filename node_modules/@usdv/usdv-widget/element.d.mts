import { HTMLAttributes } from 'react';
import * as mobx_dist_internal from 'mobx/dist/internal';
import { ChainId } from '@layerzerolabs/lz-sdk';
import { BridgeApi } from '@layerzerolabs/ui-bridge-sdk';
import { Currency, FeeQuote, CurrencyAmount, Percent, AdapterParams, FiatAmount, Token, Transaction as Transaction$1 } from '@layerzerolabs/ui-core';
import * as _layerzerolabs_ui_wallet from '@layerzerolabs/ui-wallet';
import { Wallet, ActiveWallet } from '@layerzerolabs/ui-wallet';
import { IPromiseBasedObservable } from 'mobx-utils';
import { ObservableMap } from 'mobx';
import * as ethers from 'ethers';
import { Signer } from 'ethers';
import { Theme as Theme$1, CSSObject, ThemeOptions } from '@mui/system';

type FromPromise<T> = IPromiseBasedObservable<T>;

declare enum DstNativeAmount {
    DEFAULT = "DEFAULT",
    MAX = "MAX"
}
declare class BridgeStore {
    isLoading: boolean;
    isSigning: boolean;
    isMining: boolean;
    isExecuting: boolean;
    isApproving: boolean;
    isRegistering: boolean;
    form: BridgeFrom;
    apis: BridgeApi<unknown, AnyFee>[];
    currencies: Currency[];
    promise: BridgePromise;
    constructor();
    get output(): BridgeOutput | undefined;
    get messageFee(): FeeQuote | undefined;
    get extraGas(): number | undefined;
    get limitAmount(): CurrencyAmount | undefined;
    get allowance(): CurrencyAmount | undefined;
    get transferApi(): BridgeApi<unknown, CurrencyAmount | Record<string, CurrencyAmount>> | undefined;
    get registerApi(): BridgeApi<unknown, unknown> | undefined;
    get claimApi(): BridgeApi<unknown, unknown> | undefined;
    get chains(): ChainId[];
    get srcCurrencyOptions(): CurrencyOption$1[];
    get dstCurrencyOptions(): CurrencyOption$1[];
    get srcCurrencyOptionsGroups(): OptionGroup<CurrencyOption$1>[];
    get dstCurrencyOptionsGroups(): OptionGroup<CurrencyOption$1>[];
    get srcNetworkOptions(): ChainOption[];
    get dstNetworkOptions(): ChainOption[];
    get dstWallet(): Wallet<unknown> | undefined;
    get srcWallet(): Wallet<unknown> | undefined;
    get srcAddress(): string | undefined;
    get dstAddress(): string | undefined;
    get srcNativeBalance(): CurrencyAmount | undefined;
    get dstNativeBalance(): CurrencyAmount | undefined;
    get srcNativeCost(): CurrencyAmount | undefined;
    get maxDstNativeAmount(): CurrencyAmount | undefined;
    get maxAmount(): CurrencyAmount | undefined;
    get srcBalance(): CurrencyAmount | undefined;
    get dstBalance(): CurrencyAmount | undefined;
    get amount(): CurrencyAmount | undefined;
    get outputAmount(): CurrencyAmount | undefined;
    get slippage(): Percent | undefined;
    get minAmount(): CurrencyAmount | undefined;
    get dstNativeAmount(): CurrencyAmount | undefined;
    get errors(): string[];
    get unclaimed(): CurrencyAmount[];
    get hasUnclaimed(): boolean;
    get isApproved(): boolean | undefined;
    get adapterParams(): AdapterParams | undefined;
    updateAllowance(): Promise<unknown>;
    setSlippage(amount: string): void;
    setAmount(amount: string): void;
    setOutput(amount: string): void;
    setDstAddress(address: string | undefined): void;
    setDstNativeAmount(amount: string | DstNativeAmount): void;
    setMaxAmount(): void;
    setSrcChainId(chainId: ChainId): void;
    setDstChainId(chainId: ChainId): void;
    setSrcCurrency(currency?: Currency): void;
    setDstCurrency(currency?: Currency): void;
    switch(): void;
    transfer: () => mobx_dist_internal.CancellablePromise<void>;
    register: () => Promise<unknown>;
    approve: () => Promise<void>;
    updateBalances(): Promise<PromiseSettledResult<void>[]>;
    updateAmount: () => mobx_dist_internal.CancellablePromise<void>;
    updateOutput: () => mobx_dist_internal.CancellablePromise<void>;
    updateMessageFee: () => mobx_dist_internal.CancellablePromise<void>;
    updateExtraGas: () => mobx_dist_internal.CancellablePromise<void>;
    updateLimit: () => mobx_dist_internal.CancellablePromise<void>;
    addBridge(bridge: BridgeApi<unknown, AnyFee>): void;
    addCurrencies(currencies: Currency[]): void;
}
type CurrencyOption$1 = {
    currency: Currency;
    disabled?: boolean;
    valid?: boolean;
    overlay?: React.ReactNode;
};
type ChainOption = {
    chainId: ChainId;
    disabled?: boolean;
    overlay?: React.ReactNode;
};
type OptionGroup<Option> = {
    title: React.ReactNode;
    key: React.Key;
    items: Option[];
};
type BridgeFrom = {
    srcCurrency: Currency | undefined;
    dstCurrency: Currency | undefined;
    srcChainId: ChainId | undefined;
    dstChainId: ChainId | undefined;
    dstAddress: string | undefined;
    amount: string;
    output: string;
    slippage: string;
    dstNativeAmount: DstNativeAmount | string;
};
type BridgePromise = {
    amount: FromPromise<CurrencyAmount> | undefined;
    output: FromPromise<BridgeOutput> | undefined;
    allowance: FromPromise<CurrencyAmount> | undefined;
    limitAmount: FromPromise<CurrencyAmount> | undefined;
    extraGas: FromPromise<number> | undefined;
    messageFee: FromPromise<FeeQuote> | undefined;
};
type AnyFee = CurrencyAmount | Record<string, CurrencyAmount>;
type BridgeFee = Record<string, CurrencyAmount>;
type BridgeOutput = {
    amount: CurrencyAmount;
    fees: BridgeFee;
};
declare const bridgeStore: BridgeStore;

declare enum FiatSymbol {
    USD = "USD",
    EUR = "EUR"
}
type CurrencyLike = {
    symbol: string;
};
declare class FiatStore {
    protected quotes: ObservableMap<string, FiatQuota>;
    protected symbols: ObservableMap<string, string>;
    constructor();
    getSymbol(currency: undefined): undefined;
    getSymbol(currency: CurrencyLike): string;
    getSymbol(currency: CurrencyLike | undefined): string | undefined;
    addSymbols(symbols: Record<string, string>): void;
    getFiatPrice(currency: Currency, fiatSymbol?: FiatSymbol): FiatAmount | undefined;
    getFiatAmount(amount?: CurrencyAmount, fiatSymbol?: FiatSymbol): FiatAmount | undefined;
    sum(amounts: Array<CurrencyAmount | undefined>, fiatSymbol?: FiatSymbol): FiatAmount | undefined;
    update: () => mobx_dist_internal.CancellablePromise<void>;
    protected disposers: (() => void)[];
    subscribe: () => void;
    unsubscribe: () => void;
}
type FiatQuota = Record<Currency['symbol'], number | undefined>;
declare const fiatStore: FiatStore;

declare enum TransactionType {
    TRANSFER = "TRANSFER",
    MINT = "MINT",
    SET_ENFORCE_COLOR = "SET_ENFORCE_COLOR",
    SYNC = "SYNC",
    CLAIM = "CLAIM",
    REMINT = "REMINT",
    REDEEM = "REDEEM",
    CLEAR_PENDING_REMINT = "CLEAR_PENDING_REMINT"
}
type Confirmation = {
    txHash: string;
    chainId: number;
};
type Timestamp = number;
type Optional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;
interface TransactionProps<Input> {
    type: TransactionType;
    input: Input;
    chainId: number;
    srcAmount?: CurrencyAmount;
    dstAmount?: CurrencyAmount;
    expectedDate: Timestamp;
    submittedDate: Timestamp;
    error: unknown | undefined;
    txHash: string;
    confirmation: Confirmation | undefined;
    completed: boolean;
    wallet?: string;
}
type TransactionConstructorProps<Input> = Optional<TransactionProps<Input>, 'confirmation' | 'completed' | 'error' | 'completed' | 'submittedDate'>;
declare class Transaction<Input = unknown> implements TransactionProps<Input> {
    type: TransactionType;
    input: Input;
    chainId: number;
    srcAmount?: CurrencyAmount;
    dstAmount?: CurrencyAmount;
    expectedDate: Timestamp;
    submittedDate: Timestamp;
    error: unknown | undefined;
    txHash: string;
    confirmation: Confirmation | undefined;
    completed: boolean;
    wallet?: string;
    constructor(props: TransactionConstructorProps<Input>, _wallet?: string);
    update(props: Partial<TransactionProps<Input>>): void;
    get srcChainId(): number;
    get dstChainId(): number | undefined;
}
declare class TransactionStore {
    initialized: boolean;
    allTransactions: Transaction<unknown>[];
    constructor();
    get isPending(): boolean;
    get currentWallet(): _layerzerolabs_ui_wallet.ActiveWallet<ethers.Signer> | undefined;
    get hasPending(): boolean;
    get recentTransactions(): Transaction<unknown>[];
    get pendingTransactions(): Transaction<unknown>[];
    create<T>(props: TransactionConstructorProps<T>): Transaction<T>;
    saveSnapshot(): void;
    restoreSnapshot(): void;
}
declare const transactionStore: TransactionStore;

interface Typography {
    fontFamily: string;
    h0: CSSObject;
    h1: CSSObject;
    h2: CSSObject;
    h3: CSSObject;
    p1: CSSObject;
    p2: CSSObject;
    p3: CSSObject;
    caption: CSSObject;
}
interface Theme extends Omit<Theme$1, 'typography'> {
    typography: Typography;
}

declare class Toggle {
    value: boolean;
    constructor();
    open(): void;
    close(): void;
    toggle(): void;
}
declare class WalletModal extends Toggle {
    activeTab: WalletTab;
    constructor();
    setActiveTab(activeTab: WalletTab): void;
}
declare class TransactionProgress extends Toggle {
    dismissed: string[];
    constructor();
    get transactions(): Transaction[];
    get hasPendingTransactions(): boolean;
    dismiss(txHash: string): void;
}
declare enum WalletTab {
    WALLET = "Wallet",
    NETWORK = "Network",
    TRANSACTIONS = "Transactions",
    UNCLAIMED = "Unclaimed"
}
declare class ThemeSettings {
    override?: Theme;
    default: Theme;
    constructor();
    get value(): Theme;
    setTheme(theme: Theme | null | undefined, { shouldSetIcon }?: {
        shouldSetIcon?: boolean;
    }): void;
}
declare class UiStore {
    theme: ThemeSettings;
    walletModal: WalletModal;
    txProgress: TransactionProgress;
    dstNativeAmountModal: Toggle;
    slippageModal: Toggle;
    dstAddressModal: Toggle;
    claimReminderAlert: Toggle;
    rpcErrorAlert: Toggle;
    mobileSidePanel: Toggle;
    constructor();
}
declare const uiStore: UiStore;

declare const usdvConfig: {
    vault: {
        address: string;
        chainKey: string;
    };
    viewDelegate: {
        address: string;
        chainKey: string;
    };
    operators: {
        chainKey: string;
        address: string;
    }[];
    tokens: Token[];
    minterProxy: {
        address: string;
        chainKey: string;
    };
    stbt: {
        address: string;
        chainKey: string;
    };
    bridgeRecolor: Record<string, {
        address: string;
        chainKey: string;
    }[]>;
};

type USDVConfig = typeof usdvConfig;

declare class WalletStore {
    protected config: USDVConfig | undefined;
    wallets: Record<string, Wallet<unknown>>;
    constructor();
    setConfig(config: USDVConfig): void;
    get supportedChainKeys(): string[];
    get isConnecting(): boolean;
    get isConnected(): boolean;
    get active(): ActiveWallet<unknown>[];
    get available(): Wallet<unknown>[];
    get evm(): ActiveWallet<Signer> | undefined;
    get solana(): ActiveWallet<unknown> | undefined;
    get aptos(): ActiveWallet<unknown> | undefined;
    addWallets(wallets: Record<string, Wallet<unknown>>): void;
}
declare const walletStore: WalletStore;

declare function createBasicTheme(options: ThemeOptions): Theme;

type SwapOutput = {
    amount: CurrencyAmount;
};
type GetAssetsInput = {
    color: number;
};
type GetOutputInput = {
    srcToken: Currency;
    dstToken: Currency;
    amount: CurrencyAmount;
    user: string;
    color: number;
};
type SwapInput = {
    srcChainId: number;
    dstChainId: number;
    srcToken: Currency;
    dstToken: Currency;
    amount: CurrencyAmount;
    minAmount: CurrencyAmount;
    srcAddress: string;
    dstAddress: string;
    fee: FeeQuote;
    color: number;
    adapterParams: AdapterParams;
};
type ApproveInput = {
    amount: CurrencyAmount;
};
type GetLimitInput = {
    srcToken: Currency;
    dstToken: Currency;
};
type GetExtraGasInput = {
    srcToken: Currency;
    dstToken: Currency;
};
type SwapApi<Signer = unknown> = {
    getInput(input: GetOutputInput): Promise<CurrencyAmount>;
    getOutput(input: GetOutputInput): Promise<SwapOutput>;
    getAllowance(srcCurrency: Currency, user: string): Promise<CurrencyAmount>;
    getMessageFee(srcCurrency: Currency, dstCurrency: Currency, adapterParams: AdapterParams): Promise<FeeQuote>;
    getLimit(input: GetLimitInput): Promise<CurrencyAmount>;
    getSrcAssets(input: GetAssetsInput): Promise<Currency[]>;
    getDstAssets(input: GetAssetsInput): Promise<Currency[]>;
    getExtraGas(input: GetExtraGasInput): Promise<number>;
    approve(input: ApproveInput): Promise<Transaction$1<Signer>>;
    swap(input: SwapInput): Promise<Transaction$1<Signer>>;
    supports(srcCurrency: Currency, dstCurrency: Currency, color?: number): boolean;
    hasSlippage(): boolean;
};

type MintForm = {
    srcCurrency: Currency | undefined;
    dstCurrency: Currency | undefined;
    amount: string;
    output: string;
    slippage: string;
    color: number | undefined;
    dstNativeAmount: string | DstNativeAmount;
    dstAddress: string | undefined;
};
declare abstract class SwapStore {
    disposers: (() => void)[];
    isLoading: boolean;
    isSigning: boolean;
    isMining: boolean;
    isExecuting: boolean;
    isApproving: boolean;
    isRegistering: boolean;
    apis: SwapApi[];
    form: MintForm;
    promises: {
        amount: FromPromise<CurrencyAmount<Currency>> | undefined;
        output: FromPromise<SwapOutput> | undefined;
        messageFee: FromPromise<FeeQuote> | undefined;
        extraGas: FromPromise<number> | undefined;
        srcCurrencies: FromPromise<Currency[]> | undefined;
        dstCurrencies: FromPromise<Currency[]> | undefined;
    };
    constructor();
    get srcChainId(): number | undefined;
    get dstChainId(): number | undefined;
    get srcCurrencies(): Currency[];
    get dstCurrencies(): Currency[];
    get api(): SwapApi<unknown> | undefined;
    get slippage(): Percent | undefined;
    get outputAmount(): CurrencyAmount | undefined;
    get srcWallet(): ActiveWallet<unknown> | undefined;
    get srcAddress(): string | undefined;
    get dstAddress(): string | undefined;
    get errors(): string[];
    get extraGas(): number | undefined;
    get color(): number | undefined;
    get srcCurrency(): Currency | undefined;
    get dstCurrency(): Currency | undefined;
    get adapterParams(): AdapterParams | undefined;
    get srcAmount(): CurrencyAmount | undefined;
    get dstAmount(): CurrencyAmount | undefined;
    get minAmount(): CurrencyAmount | undefined;
    get messageFee(): FeeQuote | undefined;
    setDstAddress(address: string | undefined): void;
    setSlippage(slippage: string): void;
    setDstNativeAmount(amount: string | DstNativeAmount): void;
    get dstNativeBalance(): CurrencyAmount | undefined;
    get dstNativeAmount(): CurrencyAmount | undefined;
    get maxDstNativeAmount(): CurrencyAmount | undefined;
    setAmount(amount: string): void;
    setOutput(output: string): void;
    setSrcCurrency(currency?: Currency): void;
    setDstCurrency(currency?: Currency): void;
    setColor(color: number | undefined): void;
    updateOutput(): Promise<SwapOutput>;
    updateAmount(): Promise<CurrencyAmount<Currency>>;
    addApi(api: SwapApi): void;
    approve: () => mobx_dist_internal.CancellablePromise<void>;
    updateMessageFee(): Promise<FeeQuote>;
    swap: () => mobx_dist_internal.CancellablePromise<void>;
    get srcCurrencyOptions(): CurrencyOption[];
    protected abstract createHistoryEntry(input: SwapInput, receipt: {
        txHash: string;
    }): Transaction<unknown>;
    get dstCurrencyOptions(): CurrencyOption[];
    get srcBalance(): CurrencyAmount | undefined;
    get dstBalance(): CurrencyAmount | undefined;
    setMaxAmount: () => void;
    updateExtraGas(): Promise<number>;
    updateBalances(): Promise<PromiseSettledResult<any>[]>;
    updateCurrencies: () => Promise<[any[], any[]]>;
    updateSrcCurrencies(): Promise<any[]>;
    updateDstCurrencies(): Promise<any[]>;
    protected getDstCurrencies(color: number): Promise<any[]>;
    protected getSrcCurrencies(color: number): Promise<any[]>;
    protected isValidPair(srcCurrency: Currency, dstCurrency: Currency): boolean;
    subscribe(): void;
    unsubscribe(): void;
}
type CurrencyOption = {
    currency: Currency;
    disabled?: boolean;
    valid?: boolean;
    overlay?: React.ReactNode;
};

declare class MintStore extends SwapStore {
    protected createHistoryEntry(input: SwapInput, receipt: {
        txHash: string;
    }): Transaction<unknown>;
}
declare const mintStore: MintStore;

declare global {
    export namespace JSX {
        interface IntrinsicElements {
            'usdv-widget': HTMLAttributes<HTMLElement>;
            'usdv-bridge': HTMLAttributes<HTMLElement>;
            'usdv-mint': HTMLAttributes<HTMLElement>;
            'usdv-tracker': HTMLAttributes<HTMLElement>;
        }
    }
}
declare const bootstrapWidget: {
    (config: {
        color: number;
        theme?: Theme;
        bridgeRecolorConfig?: {
            address: string;
            chainKey: string;
        }[];
        isTestnet?: boolean;
    }): void;
    initialized: boolean;
};
declare const themes: {
    dark: Theme;
    light: Theme;
};

export { bootstrapWidget, bridgeStore, createBasicTheme, fiatStore, mintStore, themes, transactionStore, uiStore, walletStore };
